# area under the curve value = 0.7614702.
library(tree)
rtree_model <- tree(rquality_fac~., data=rtraining_data)
rpredict_tree <- predict(rtree_model, rtesting_data[,-12], type="class")
mean(rpredict_tree != rtesting_high)
#So the misclassification error for the tree model is almost 52%
rtree_model
summary(rtree_model)
plot(rtree_model)
text(rtree_model, pretty = 0, cex = 1, col = "blue")
title("Classification Tree")
rpredict_tree_num <- as.numeric(rpredict_tree)
rpr2 <- prediction(rpredict_tree_num, ractual_num)
rauc_data2 <- performance(rpr2, "tpr", "fpr")
plot(rauc_data2, main="ROC Curve for Tree Model")
raucval2 <- performance(rpr2, measure="auc")
raucval2@y.values[[1]]
#So, the area under the curve value for the tree model = 0.7615684
library (rpart)
library(rpart.plot)
rrpart_model <- rpart(rquality_fac~., data=rtraining_data, method="class")
rrpart_model
rpredict_rpart <- predict(rrpart_model, rtesting_data[,-12], type="class")
mean(rpredict_rpart != rtesting_high)
#So the misclassification error for the tree model is 51.25%
rpart.plot(rrpart_model, extra=101)
#We can plot the tree and show the correctly and incorrectly classified instances
rpredict_rpart_num <- as.numeric(rpredict_rpart)
rpr3 <- prediction(rpredict_rpart_num, ractual_num)
rauc_data3 <- performance(rpr3, "tpr", "fpr")
plot(rauc_data3, main="ROC Curve for RPART Model")
raucval3 <- performance(rpr3, measure="auc")
raucval3@y.values[[1]]
#So, the area under the curve value for the tree model = 0.730739
rtesting<- rquality_fac[rtesting_sample]
#C50 Model
table(rtesting,predicted=rpredict_C50)
#146 correctly classified (46%)
#174 incorrectly classified (54%)
# Tree Model
table(rtesting,predicted=rpredict_tree)
#155 correctly classified (48%)
#165 incorrectly classified (52%)
# RPart Model
table(rtesting,predicted=rpredict_rpart)
#156 correctly classified (49%)
#164 incorrectly classified (51%)
install.packages("tm")
install.packages("wordcloud")
library(tm)
library(wordcloud)
sylFile<-"http://www.historyplace.com/speeches/anthony.htm"
input<- readLines(sylFile)
tail(input,20)
str(input)
#use TM package
#create the word list with counts
words.vec<-VectorSource(input)
words.corpus<- Corpus(words.vec)
words.corpustdm<-TermDocumentMatrix((words.vec))
words.corpustdm<-TermDocumentMatrix((words.corpus))
#explore
str(tdm)
tdm<-TermDocumentMatrix((words.corpus))
#explore
str(tdm)
library(wordcloud)
sylFile<-"http://www.historyplace.com/speeches/anthony.htm"
input<- readLines(sylFile)
tail(input,20)
str(input)
#use TM package
#create the word list with counts
words.vec<-VectorSource(input)
words.corpus<- Corpus(words.vec)
tdm<-TermDocumentMatrix((words.corpus))
#explore
str(tdm)
inspect(tdm[1:20,1:20])
#create word cloud
m<- as.matrix(tdm)
wordCounts<- rowSums(m)
head(wordCounts)
wordCounts<- sort(wordCounts, decreasing=TRUE)
head(wordCounts)
wordcloud(names(wordCounts),wordCounts)
head(wordCounts)
wordcloud(names(wordCounts),wordCounts)
word.corpus<- tm_map(words.corpus, content_transformer(tolower))
word.corpus<- tm_map(words.corpus, removePunctuation)
word.corpus<- tm_map(words.corpus, removeNumbers)
word.corpus<- tm_map(words.corpus, removeWords, stopwords("english"))
tdm<- TermDocumentMatrix((word.corpus))
tdm
wordCounts<- rowSums(m)
head(wordCounts)
wordCounts<- sort(wordCounts, decreasing=TRUE)
head(wordCounts,20)
cloudFrame<- data.frame(word=names(wordCounts),freq=wordCounts)
wordcloud(names(wordCounts), wordCounts)
wordcloud(names(wordCounts),wordCounts, min.freq=3,max.words = 50)
wordcloud(names(wordCounts),wordCounts, min.freq=3,max.words = 50, rot.per = 0.5)
findAssocs(tdm, "data", 0.6)
findAssocs(tdm, "course",0.6)
findAssocs(tdm, "he",0.6)
findAssocs(tdm, "the",0.6)
knitr::opts_chunk$set(echo = TRUE)
a<-airquality
# Replacing NA's values with mean values
a$Ozone[is.na(a$Ozone)] <- round(mean(a$Ozone, na.rm = TRUE))
a$Solar.R[is.na(a$Solar.R)] <- round(mean(a$Solar.R, na.rm = TRUE))
randIndex	<- sample(1:nrow(a))
head(randIndex)
r<- nrow(a)
cutPoint2_3	<- floor(2*r/3)
cutPoint2_3
atn <-a[randIndex[1:cutPoint2_3],]
att <-a[randIndex[(cutPoint2_3+1):r],]
install.packages("kernlab")
library("kernlab")
install.packages("ggplot2")
library("ggplot2")
#Predict Ozone
predictOzone <- function(x, a){
predictedOzone <- predict(x, a)
results1 <- table(predictedOzone, a$Ozone)
print(results1)
percentCorrect1 <- (results1[1,1]+results1[2,2])/(results1[1,1]+results1[1,2]+results1[2,1]+results1[2,2])*100
round(percentCorrect1)
return(percentCorrect1)
}
modelKSVM <- ksvm(Ozone ~ ., data = a)
predictOzone(modelKSVM, a)
#Root Mean Square Error
root_square <- function(error)
{
sqrt(mean(error^2))
}
modelKSVM.first <- predict(modelKSVM, a)
modelKSVM.error <- (a$Ozone - modelKSVM.first)
root_square(modelKSVM.error)
#Scatter Plot
#Creating new dataframe
dfnew <- data.frame(a$Wind,a$Temp,modelKSVM.error)
#altering column names
colnames(dfnew) <- c("Wind","Temp","Error")
#plotting points
plotdf <- ggplot(data = dfnew,aes(x=a$Temp,y=a$Wind)) + geom_point(aes(size=modelKSVM.error), color = "red") + ggtitle("KSVM Model")
plotdf
#Plotting the results for 'svm'
install.packages("e1071")
library(e1071)
modelSVM <- svm(Ozone ~ ., data = a)
predictOzone(modelSVM, a)
modelSVM.first <- predict(modelSVM, a)
modelSVM.error <- (a$Ozone - modelSVM.first)
root_square(modelSVM.error)
dfnew1 <- data.frame(a$Wind,a$Temp,modelSVM.error)
colnames(dfnew1) <- c("Wind","Temp","Error")
plotdf1 <- ggplot(data = dfnew1,aes(x=a$Temp,y=a$Wind)) + geom_point(aes(size=modelSVM.error), color = "red") + ggtitle("SVM Model")
plotdf1
modelLM <- lm(Ozone ~., data=a)
modelLM.first <- predict(modelLM, a)
modelLM.error <- (a$Ozone - modelLM.first)
root_square(modelLM.error)
dfnew2 <- data.frame(a$Wind,a$Temp,modelLM.error)
colnames(dfnew2) <- c("Wind","Temp","Error")
plotdf2 <- ggplot(data = dfnew2,aes(x=a$Temp,y=a$Wind)) + geom_point(aes(size=modelLM.error), color = "red") + ggtitle("LM Model")
plotdf2
# The 3 results
install.packages("gridExtra")
library(gridExtra)
grid.arrange(plotdf,plotdf1, plotdf2, ncol = 2)
goodOzone <-c()
for (i in 1:153) {
if (a$Ozone[i] < mean(a$Ozone)){
goodOzone<-append(goodOzone,0)
}
else goodOzone<-append(goodOzone,1)
}
#adding the column in the dataframe
a<-data.frame(a,goodOzone)
# Building the model
predictGoodozone <- function(m, a){
predictedGoodozone <- predict(m, a)
results1 <- table(predictedGoodozone, a$goodOzone)
print(results1)
percentCorrect1 <- (results1[1,1]+results1[2,2])/(results1[1,1]+results1[1,2]+results1[2,1]+results1[2,2])*100
round(percentCorrect1)
return(percentCorrect1)
}
modelKSVM1 <- ksvm(goodOzone ~ ., data = a)
predictGoodozone(modelKSVM1, a)
# Testing the model
root_square1 <- function(error)
{
sqrt(mean(error^2))
}
modelKSVM1.first <- predict(modelKSVM1, a)
modelKSVM1.error <- (a$goodOzone - modelKSVM1.first)
root_square1(modelKSVM1.error)
# Plot the results
dfnew11 <- data.frame(a$Wind,a$Temp,modelKSVM1.error)
colnames(dfnew11) <- c("Wind","Temp","Error")
plotdf11 <- ggplot(data = dfnew11,aes(x=a$Temp,y=a$Wind)) + geom_point(aes(size=modelKSVM1.error), color = "red") + ggtitle("KSVM Model")
plotdf11
#Compute the models
modelSVM1 <- svm(goodOzone ~ ., data = a)
predictGoodozone(modelSVM1, a)
modelSVM1.first <- predict(modelSVM1, a)
modelSVM1.error <- (a$goodOzone - modelSVM1.first)
root_square1(modelSVM1.error)
dfnew12 <- data.frame(a$Wind,a$Temp,modelSVM1.error)
colnames(dfnew12) <- c("Wind","Temp","Error")
plotdf12 <- ggplot(data = dfnew12,aes(x=a$Temp,y=a$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf12
#Naive Bayes
modelNB <- naiveBayes(goodOzone ~ ., data = a)
predictGoodozone(modelNB, a)
goodOzone <-c()
for (i in 1:153) {
if (a$Ozone[i] < mean(a$Ozone)){
goodOzone<-append(goodOzone,0)
}
else goodOzone<-append(goodOzone,1)
}
#adding the column in the dataframe
a1<-data.frame(a,goodOzone)
# Building the model
predictGoodozone <- function(m, a1){
predictedGoodozone <- predict(m, a1)
results1 <- table(predictedGoodozone, a1$goodOzone)
print(results1)
percentCorrect1 <- (results1[1,1]+results1[2,2])/(results1[1,1]+results1[1,2]+results1[2,1]+results1[2,2])*100
round(percentCorrect1)
return(percentCorrect1)
}
modelKSVM1 <- ksvm(goodOzone ~ ., data = a1)
predictGoodozone(modelKSVM1, a1)
# Testing the model
root_square1 <- function(error)
{
sqrt(mean(error^2))
}
modelKSVM1.first <- predict(modelKSVM1, a1)
modelKSVM1.error <- (a1$goodOzone - modelKSVM1.first)
root_square1(modelKSVM1.error)
# Plot the results
dfnew11 <- data.frame(a1$Wind,a1$Temp,modelKSVM1.error)
colnames(dfnew11) <- c("Wind","Temp","Error")
plotdf11 <- ggplot(data = dfnew11,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelKSVM1.error), color = "red") + ggtitle("KSVM Model")
plotdf11
#Compute the models
modelSVM1 <- svm(goodOzone ~ ., data = a1)
predictGoodozone(modelSVM1, a1)
modelSVM1.first <- predict(modelSVM1, a1)
modelSVM1.error <- (a$goodOzone - modelSVM1.first)
root_square1(modelSVM1.error)
dfnew12 <- data.frame(a1$Wind,a1$Temp,modelSVM1.error)
colnames(dfnew12) <- c("Wind","Temp","Error")
plotdf12 <- ggplot(data = dfnew12,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf12
#Naive Bayes
modelNB <- naiveBayes(goodOzone ~ ., data = a1)
predictGoodozone(modelNB, a1)
View(modelNB)
modelNB <- naiveBayes(goodOzone ~ ., data = a1)
modelNB.error <- predict(modelNB, a)
modelNB <- naiveBayes(goodOzone ~ ., data = a)
predictGoodozone(modelNB, a1)
modelNB <- naiveBayes(goodOzone ~ ., data = a1)
predictGoodozone(modelNB, a1)
modelNB <- naiveBayes(goodOzone ~ ., data = airquality)
predictGoodozone(modelNB, airquality)
predictGoodozone(modelNB, a)
modelNB <- naiveBayes(goodOzone ~ ., data = a1)
View(modelNB)
View(modelNB)
modelNB <- naiveBayes(goodOzone ~ , data = a1)
modelNB <- naiveBayes(goodOzone, data = a1)
modelNB <- naiveBayes(goodOzone., data = a1)
modelNB <- naiveBayes(goodOzone ., data = a1)
modelNB <- naiveBayes(goodOzone~ ., data = a1)
View(modelLM)
modelNB
predictGoodozone(modelNB, a1)
predictGoodozone(modelNB)
predictGoodozone(modelNB, a1)
#predictGoodozone(modelNB, a1)
predictedGoodozone1 <- predict(modelNB, a1)
results1a <- table(predictedGoodozone1, a1$goodOzone)
results1a <- table(predictedGoodozone1, a$goodOzone)
#predictGoodozone(modelNB, a1)
predictedGoodozone1 <- predict(modelNB, a1)
modelNB <- naiveBayes(goodOzone~ ., data = a1)
modelNB
#predictGoodozone(modelNB, a1)
predictedGoodozone1 <- predict(modelNB, a1)
results1a <- table(predictedGoodozone1, a1$goodOzone)
modelNB.error <- predict(modelNB, a1)
tmp <- data.frame(a1$goodOzone)
predictedNB <- predict(modelNB, tmp)
predictedNB
a1 <- as.numeric(a1)
# Building the model
predictGoodozone <- function(m, a1){
predictedGoodozone <- predict(m, a1)
results1 <- table(predictedGoodozone, a1$goodOzone)
print(results1)
percentCorrect1 <- (results1[1,1]+results1[2,2])/(results1[1,1]+results1[1,2]+results1[2,1]+results1[2,2])*100
round(percentCorrect1)
return(percentCorrect1)
}
modelKSVM1 <- ksvm(goodOzone ~ ., data = a1)
predictGoodozone(modelKSVM1, a1)
# Testing the model
root_square1 <- function(error)
{
sqrt(mean(error^2))
}
modelKSVM1.first <- predict(modelKSVM1, a1)
modelKSVM1.error <- (a1$goodOzone - modelKSVM1.first)
root_square1(modelKSVM1.error)
# Plot the results
dfnew11 <- data.frame(a1$Wind,a1$Temp,modelKSVM1.error)
colnames(dfnew11) <- c("Wind","Temp","Error")
plotdf11 <- ggplot(data = dfnew11,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelKSVM1.error), color = "red") + ggtitle("KSVM Model")
plotdf11
#Compute the models
modelSVM1 <- svm(goodOzone ~ ., data = a1)
predictGoodozone(modelSVM1, a1)
modelSVM1.first <- predict(modelSVM1, a1)
modelSVM1.error <- (a$goodOzone - modelSVM1.first)
root_square1(modelSVM1.error)
dfnew12 <- data.frame(a1$Wind,a1$Temp,modelSVM1.error)
colnames(dfnew12) <- c("Wind","Temp","Error")
plotdf12 <- ggplot(data = dfnew12,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf12
#Naive Bayes
modelNB <- naiveBayes(as.factor(good_ozone) ~ (Wind + Temp + Solar.R), data=a1)
#Naive Bayes
modelNB <- naiveBayes(as.factor(goodOzone) ~ (Wind + Temp + Solar.R), data=a1)
modelNB
predictGoodozone(modelNB, a1)
modelNB.error <- predict(modelNB, a1)
tmp <- data.frame(a1$goodOzone)
predictedNB <- predict(modelNB, tmp)
predictedNB
predictedNB
dfnew13 <- data.frame(a1$Wind,a1$Temp,modelNB.error)
dfnew13 <- data.frame(a1$Wind,a1$Temp,modelNB.error)
colnames(dfnew13) <- c("Wind","Temp","Error")
plotdf13 <- ggplot(data = dfnew13,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf13 <- ggplot(data = dfnew13,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf13
grid.arrange(plotdf11,plotdf12, plotdf13, ncol = 2)
plotdf13 <- ggplot(data = dfnew13,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("Naive Bayes Model")
plotdf13
grid.arrange(plotdf11,plotdf12, plotdf13, ncol = 2)
# Building the model
predictGoodozone <- function(m, a1){
predictedGoodozone <- predict(m, a1)
results1 <- table(predictedGoodozone, a1$goodOzone)
print(results1)
percentCorrect1 <- (results1[1,1]+results1[2,2])/(results1[1,1]+results1[1,2]+results1[2,1]+results1[2,2])*100
round(percentCorrect1)
return(percentCorrect1)
}
modelKSVM1 <- ksvm(goodOzone ~ ., data = a1)
predictGoodozone(modelKSVM1, a1)
# Testing the model
root_square1 <- function(error)
{
sqrt(mean(error^2))
}
modelKSVM1.first <- predict(modelKSVM1, a1)
modelKSVM1.error <- (a1$goodOzone - modelKSVM1.first)
root_square1(modelKSVM1.error)
# Plot the results
dfnew11 <- data.frame(a1$Wind,a1$Temp,modelKSVM1.error)
colnames(dfnew11) <- c("Wind","Temp","Error")
plotdf11 <- ggplot(data = dfnew11,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelKSVM1.error), color = "red") + ggtitle("KSVM Model")
plotdf11
#Compute the models
modelSVM1 <- svm(goodOzone ~ ., data = a1)
predictGoodozone(modelSVM1, a1)
modelSVM1.first <- predict(modelSVM1, a1)
modelSVM1.error <- (a$goodOzone - modelSVM1.first)
root_square1(modelSVM1.error)
dfnew12 <- data.frame(a1$Wind,a1$Temp,modelSVM1.error)
colnames(dfnew12) <- c("Wind","Temp","Error")
plotdf12 <- ggplot(data = dfnew12,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf12
#Naive Bayes
modelNB <- naiveBayes(as.factor(goodOzone) ~ (Wind + Temp + Solar.R), data=a1)
modelNB
predictGoodozone(modelNB, a1)
modelNB.error <- predict(modelNB, a1)
tmp <- data.frame(a1$goodOzone)
predictedNB <- predict(modelNB, tmp)
predictedNB
dfnew13 <- data.frame(a1$Wind,a1$Temp,modelNB.error)
colnames(dfnew13) <- c("Wind","Temp","Error")
plotdf13 <- ggplot(data = dfnew13,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("Naive Bayes Model")
plotdf13
# Charts
grid.arrange(plotdf11,plotdf12, plotdf13, ncol = 2)
# Building the model
predictGoodozone <- function(m, a1){
predictedGoodozone <- predict(m, a1)
results1 <- table(predictedGoodozone, a1$goodOzone)
print(results1)
percentCorrect1 <- (results1[1,1]+results1[2,2])/(results1[1,1]+results1[1,2]+results1[2,1]+results1[2,2])*100
round(percentCorrect1)
return(percentCorrect1)
}
modelKSVM1 <- ksvm(goodOzone ~ ., data = a1)
predictGoodozone(modelKSVM1, a1)
# Testing the model
root_square1 <- function(error)
{
sqrt(mean(error^2))
}
modelKSVM1.first <- predict(modelKSVM1, a1)
modelKSVM1.error <- (a1$goodOzone - modelKSVM1.first)
root_square1(modelKSVM1.error)
# Plot the results
dfnew11 <- data.frame(a1$Wind,a1$Temp,modelKSVM1.error)
colnames(dfnew11) <- c("Wind","Temp","Error")
plotdf11 <- ggplot(data = dfnew11,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelKSVM1.error), color = "red") + ggtitle("KSVM Model")
plotdf11
#Compute the models
modelSVM1 <- svm(goodOzone ~ ., data = a1)
predictGoodozone(modelSVM1, a1)
modelSVM1.first <- predict(modelSVM1, a1)
modelSVM1.error <- (a$goodOzone - modelSVM1.first)
root_square1(modelSVM1.error)
dfnew12 <- data.frame(a1$Wind,a1$Temp,modelSVM1.error)
colnames(dfnew12) <- c("Wind","Temp","Error")
plotdf12 <- ggplot(data = dfnew12,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf12
#Naive Bayes
modelNB <- naiveBayes(as.factor(goodOzone) ~ (Wind + Temp + Solar.R), data=a1)
modelNB
predictGoodozone(modelNB, a1)
modelNB.error <- predict(modelNB, a1)
tmp <- data.frame(a1$goodOzone)
predictedNB <- predict(modelNB, tmp)
predictedNB
dfnew13 <- data.frame(a1$Wind,a1$Temp,modelNB.error)
colnames(dfnew13) <- c("Wind","Temp","Error")
plotdf13 <- ggplot(data = dfnew13,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelNB.error), color = "red") + ggtitle("Naive Bayes Model")
plotdf13
# Charts
grid.arrange(plotdf11,plotdf12, plotdf13, ncol = 2)
goodOzone <-c()
for (i in 1:153) {
if (a$Ozone[i] < mean(a$Ozone)){
goodOzone<-append(goodOzone,0)
}
else goodOzone<-append(goodOzone,1)
}
#adding the column in the dataframe
a1<-data.frame(a,goodOzone)
# Building the model
predictGoodozone <- function(m, a1){
predictedGoodozone <- predict(m, a1)
results1 <- table(predictedGoodozone, a1$goodOzone)
print(results1)
percentCorrect1 <- (results1[1,1]+results1[2,2])/(results1[1,1]+results1[1,2]+results1[2,1]+results1[2,2])*100
round(percentCorrect1)
return(percentCorrect1)
}
modelKSVM1 <- ksvm(goodOzone ~ ., data = a1)
predictGoodozone(modelKSVM1, a1)
# Testing the model
root_square1 <- function(error)
{
sqrt(mean(error^2))
}
modelKSVM1.first <- predict(modelKSVM1, a1)
modelKSVM1.error <- (a1$goodOzone - modelKSVM1.first)
root_square1(modelKSVM1.error)
# Plot the results
dfnew11 <- data.frame(a1$Wind,a1$Temp,modelKSVM1.error)
colnames(dfnew11) <- c("Wind","Temp","Error")
plotdf11 <- ggplot(data = dfnew11,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelKSVM1.error), color = "red") + ggtitle("KSVM Model")
plotdf11
#Compute the models
modelSVM1 <- svm(goodOzone ~ ., data = a1)
predictGoodozone(modelSVM1, a1)
modelSVM1.first <- predict(modelSVM1, a1)
modelSVM1.error <- (a$goodOzone - modelSVM1.first)
root_square1(modelSVM1.error)
dfnew12 <- data.frame(a1$Wind,a1$Temp,modelSVM1.error)
colnames(dfnew12) <- c("Wind","Temp","Error")
plotdf12 <- ggplot(data = dfnew12,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelSVM1.error), color = "red") + ggtitle("SVM Model")
plotdf12
#Naive Bayes
modelNB <- naiveBayes(as.factor(goodOzone) ~ (Wind + Temp + Solar.R), data=a1)
modelNB
predictGoodozone(modelNB, a1)
modelNB.error <- predict(modelNB, a1)
tmp <- data.frame(a1$goodOzone)
predictedNB <- predict(modelNB, tmp)
predictedNB
dfnew13 <- data.frame(a1$Wind,a1$Temp,modelNB.error)
colnames(dfnew13) <- c("Wind","Temp","Error")
plotdf13 <- ggplot(data = dfnew13,aes(x=a1$Temp,y=a1$Wind)) + geom_point(aes(size=modelNB.error), color = "red") + ggtitle("Naive Bayes Model")
plotdf13
# Charts
grid.arrange(plotdf11,plotdf12, plotdf13, ncol = 2)
